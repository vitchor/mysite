package com.dyfocus.FlashFOFViewer{    import caurina.transitions.Tweener;    import flash.display.Loader;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.ProgressEvent;    import flash.events.TimerEvent;    import flash.net.URLLoader;    import flash.net.URLRequest;    import flash.display.MovieClip;    import flash.utils.setTimeout;    import flash.utils.Timer;    import flash.display.LoaderInfo;    import flash.display.Bitmap;        public class MainClass extends Sprite {                private var xml:XML;        private var urlLoader:URLLoader;        private var loader:Loader;        private var fofId:String = root.loaderInfo.parameters.fofId as String;        private var XML_PATH:String;        private var imageUrl:Array;        private var iterationCount:Number = 0;        private var currentImage:Number = 0;        private var imgLength:Number;        private var timer:Timer;        private var timerDelay:Number = 2000;        private var bitmapVector:Vector.<Bitmap>;                public function MainClass() {            XML_PATH = new String();            XML_PATH = "http://dyfoc.us/uploader/" + fofId + "/flash_fof/";            urlLoader = new URLLoader();            imageUrl = new Array();            urlLoader.load(new URLRequest(XML_PATH));            urlLoader.addEventListener(Event.COMPLETE, loadXML);            timer = new Timer(timerDelay);            timer.addEventListener(TimerEvent.TIMER, showImage);			//Security.loadPolicyFile("http://s3.amazonaws.com/crossdomain.xml");			//preloader_txt.text = fofId.toString();        }                private function loadXML(e:Event):void {			//preloader_txt.text = "Something";			trace("Loading XML");            xml = new XML(e.target.data);            imgLength = xml.image.length();                        for (var i:int = 0; i < imgLength; i++) {                imageUrl[i] = xml.image[i].@src;            }            			bitmapVector = new Vector.<Bitmap>(imgLength);			            initImages();        }        		        private function initImages():void {			trace("Initializing Images");			trace(imgLength);            for (var i:int = 0; i < imgLength; i++) {				trace("Iterating..");                loader = new Loader();                loader.load(new URLRequest(imageUrl[i]));				loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, loadImage);                loader.contentLoaderInfo.addEventListener(Event.COMPLETE, storeImage);            }        }				private function loadImage(e:ProgressEvent) { 			trace("Loading Images");			if (!timer.running) {				timer.stop();			}			var percent:Number = e.bytesLoaded / e.bytesTotal * 100;		}	                private function storeImage(e:Event):void {			trace("Storing Images");            bitmapVector[iterationCount] = Bitmap(e.target.content);            var sizePercentage:Number = 270/bitmapVector[iterationCount].height;            bitmapVector[iterationCount].height *= sizePercentage;            bitmapVector[iterationCount].width *= sizePercentage;			var imageX:int = (stage.stageWidth - bitmapVector[iterationCount].width)/2;			bitmapVector[iterationCount].x = imageX;            			iterationCount++;            if (iterationCount == (imgLength-1)) {                showImage(e);            }        }                private function showImage(e:Event):void { 			trace("Showing Images");			bitmapVector[currentImage].alpha = 0;            container.addChild(bitmapVector[currentImage]);            Tweener.addTween(bitmapVector[currentImage], { alpha:1, time:1, transition:"easeOutSine", onComplete:nextImage } );                            currentImage++;            if (currentImage == imgLength) {                currentImage = 0;            }						while (container.numChildren > 2) {								container.removeChildAt(0);			}        }                private function nextImage() {			trace("Starting Timer");            timer.start();        }    }}